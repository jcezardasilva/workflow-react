@use 'drawflow/dist/drawflow.min.css';

:root {
    --dfNodeType: flex;
    --dfNodeTypeFloat: none;
    --dfNodeBackgroundColor: rgba(55, 55, 55, 1);
    --dfNodeTextColor: rgb(177, 177, 177);
    --dfNodeBorderSize: 0px;
    --dfNodeBorderColor: #000000;
    --dfNodeBorderRadius: 5px;
    --dfNodeMinHeight: 40px;
    --dfNodeMinWidth: 160px;
    --dfNodePaddingTop: 2px;
    --dfNodePaddingBottom: 2px;
    --dfNodeBoxShadowHL: 0px;
    --dfNodeBoxShadowVL: 2px;
    --dfNodeBoxShadowBR: 10px;
    --dfNodeBoxShadowS: 0px;
    --dfNodeBoxShadowColor: #000000;

    --dfNodeHoverBackgroundColor: rgb(48, 48, 48);
    --dfNodeHoverTextColor: #000000;
    --dfNodeHoverBorderSize: 2px;
    --dfNodeHoverBorderColor: #000000;
    --dfNodeHoverBorderRadius: 4px;

    --dfNodeHoverBoxShadowHL: 0px;
    --dfNodeHoverBoxShadowVL: 2px;
    --dfNodeHoverBoxShadowBR: 10px;
    --dfNodeHoverBoxShadowS: 2px;
    --dfNodeHoverBoxShadowColor: #000000;

    --dfNodeSelectedBackgroundColor: #000000;
    --dfNodeSelectedTextColor: #ffffff;
    --dfNodeSelectedBorderSize: 2px;
    --dfNodeSelectedBorderColor: #000000;
    --dfNodeSelectedBorderRadius: 4px;

    --dfNodeSelectedBoxShadowHL: 0px;
    --dfNodeSelectedBoxShadowVL: 2px;
    --dfNodeSelectedBoxShadowBR: 10px;
    --dfNodeSelectedBoxShadowS: 2px;
    --dfNodeSelectedBoxShadowColor: #000000;

    --dfInputBackgroundColor: #ffffff;
    --dfInputBorderSize: 2px;
    --dfInputBorderColor: #000000;
    --dfInputBorderRadius: 50px;
    --dfInputLeft: -25px;
    --dfInputHeight: 15px;
    --dfInputWidth: 15px;

    --dfInputHoverBackgroundColor: #ffffff;
    --dfInputHoverBorderSize: 2px;
    --dfInputHoverBorderColor: #000000;
    --dfInputHoverBorderRadius: 50px;

    --dfOutputBackgroundColor: #ffffff;
    --dfOutputBorderSize: 2px;
    --dfOutputBorderColor: #000000;
    --dfOutputBorderRadius: 50px;
    --dfOutputRight: -7px;
    --dfOutputHeight: 15px;
    --dfOutputWidth: 15px;

    --dfOutputHoverBackgroundColor: #ffffff;
    --dfOutputHoverBorderSize: 2px;
    --dfOutputHoverBorderColor: #000000;
    --dfOutputHoverBorderRadius: 50px;
}

.parent-drawflow {
    height: 100vh;
    text-align: initial;
    background: #2b2c30;
    background-size: 20px 20px;
    background-image: radial-gradient(#494949 1px, transparent 1px);
}

.drawflow {
    .drawflow-node {
        display: var(--dfNodeType);
        background: var(--dfNodeBackgroundColor);
        color: var(--dfNodeTextColor);
        border: var(--dfNodeBorderSize) solid var(--dfNodeBorderColor);
        padding-top: var(--dfNodePaddingTop);
        padding-bottom: var(--dfNodePaddingBottom);
        -webkit-box-shadow: var(--dfNodeBoxShadowHL) var(--dfNodeBoxShadowVL) var(--dfNodeBoxShadowBR) var(--dfNodeBoxShadowS) var(--dfNodeBoxShadowColor);
        box-shadow: var(--dfNodeBoxShadowHL) var(--dfNodeBoxShadowVL) var(--dfNodeBoxShadowBR) var(--dfNodeBoxShadowS) var(--dfNodeBoxShadowColor);
    
        .input {
            left: var(--dfInputLeft);
            background: var(--dfInputBackgroundColor);
            border: var(--dfInputBorderSize) solid var(--dfInputBorderColor);
            border-radius: var(--dfInputBorderRadius);
            height: var(--dfInputHeight);
            width: var(--dfInputWidth);
        }

        .input:hover {
            background: var(--dfInputHoverBackgroundColor);
            border: var(--dfInputHoverBorderSize) solid var(--dfInputHoverBorderColor);
            border-radius: var(--dfInputHoverBorderRadius);
        }

        .outputs {
            float: var(--dfNodeTypeFloat);
        }

        .output {
            right: var(--dfOutputRight);
            background: var(--dfOutputBackgroundColor);
            border: var(--dfOutputBorderSize) solid var(--dfOutputBorderColor);
            border-radius: var(--dfOutputBorderRadius);
            height: var(--dfOutputHeight);
            width: var(--dfOutputWidth);
        }

        .output:hover {
            background: var(--dfOutputHoverBackgroundColor);
            border: var(--dfOutputHoverBorderSize) solid var(--dfOutputHoverBorderColor);
            border-radius: var(--dfOutputHoverBorderRadius);
        }

    }

    .drawflow-node:hover {
        cursor: grab;
        background: var(--dfNodeHoverBackgroundColor);
        color: var(--dfNodeHoverTextColor);
        border: var(--dfNodeHoverBorderSize) solid var(--dfNodeHoverBorderColor);
        border-radius: var(--dfNodeHoverBorderRadius);
        -webkit-box-shadow: var(--dfNodeHoverBoxShadowHL) var(--dfNodeHoverBoxShadowVL) var(--dfNodeHoverBoxShadowBR) var(--dfNodeHoverBoxShadowS) var(--dfNodeHoverBoxShadowColor);
        box-shadow: var(--dfNodeHoverBoxShadowHL) var(--dfNodeHoverBoxShadowVL) var(--dfNodeHoverBoxShadowBR) var(--dfNodeHoverBoxShadowS) var(--dfNodeHoverBoxShadowColor);
    }

    .drawflow-node:active {
        cursor: grabbing;
        background: var(--dfNodeHoverBackgroundColor);
        color: var(--dfNodeHoverTextColor);
        border: var(--dfNodeHoverBorderSize) solid var(--dfNodeHoverBorderColor);
        border-radius: var(--dfNodeHoverBorderRadius);
        -webkit-box-shadow: var(--dfNodeHoverBoxShadowHL) var(--dfNodeHoverBoxShadowVL) var(--dfNodeHoverBoxShadowBR) var(--dfNodeHoverBoxShadowS) var(--dfNodeHoverBoxShadowColor);
        box-shadow: var(--dfNodeHoverBoxShadowHL) var(--dfNodeHoverBoxShadowVL) var(--dfNodeHoverBoxShadowBR) var(--dfNodeHoverBoxShadowS) var(--dfNodeHoverBoxShadowColor);
    }

    .drawflow-node.selected {
        background: var(--dfNodeSelectedBackgroundColor);
        color: var(--dfNodeSelectedTextColor);
        border: var(--dfNodeSelectedBorderSize) solid var(--dfNodeSelectedBorderColor);
        border-radius: var(--dfNodeSelectedBorderRadius);
        -webkit-box-shadow: var(--dfNodeSelectedBoxShadowHL) var(--dfNodeSelectedBoxShadowVL) var(--dfNodeSelectedBoxShadowBR) var(--dfNodeSelectedBoxShadowS) var(--dfNodeSelectedBoxShadowColor);
        box-shadow: var(--dfNodeSelectedBoxShadowHL) var(--dfNodeSelectedBoxShadowVL) var(--dfNodeSelectedBoxShadowBR) var(--dfNodeSelectedBoxShadowS) var(--dfNodeSelectedBoxShadowColor);
    }
}

.action {
    .header {
        display: flex;
        justify-content: space-between;
        border-bottom: #494949 1px solid;
    }
    .content {
        padding-top: 10px;
    }

}

.rectangle {
    border-radius: var(--dfNodeBorderRadius) !important;
    min-height: var(--dfNodeMinHeight) !important;
    width: auto !important;
    min-width: var(--dfNodeMinWidth) !important;
}

.circle {
    height: 100px !important;
    width: 100px !important;
    border-radius: 50% !important;
}

.diamond {
    width: 100px !important;
    height: 100px !important;
    transform: rotate(-45deg) !important;

    .drawflow_content_node {
        transform: rotate(45deg) !important;
    }

    .input {
        top: -62px !important;
        left: 106px !important;
    }

    .output_1 {
        top: 80px !important;
    }

    .output_2 {
        top: -75px !important;
        left: -125px !important;
    }
}

.show-actions {
    position: absolute;
    top: 20px;
    left: 20px;
    z-index: 9999;
    color: #606060;
    background-color: #2b2c30;
    font-size: 40px;
    cursor: pointer;

    :hover {
        color: #505050;        
    }
}
.actions-card {
    position: absolute;
    top: 80px;
    left: 20px;
    z-index: 999;
    min-width: 300px;
    background-color: #303030;
}
.bar-zoom {
    z-index: 999;
    color: #606060;
    font-size: 30px;
    position: absolute;
    bottom: 20px;
    right: 50px;

    svg:hover {
        color: #505050;        
    }
}

.offcanvas {
    z-index: 9999;
    background-color: #303030;
    color: #bbb;
}