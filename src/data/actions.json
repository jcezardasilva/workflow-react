[
    {
        "category": "common",
        "name": "ConditionalStep",
        "action": "class ConditionalStep {\n    process(context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stepEntity = context.get(\"currentStep\");\n            const model = stepEntity.variables;\n            if (!(model.operator in operators)) {\n                throw Error(\"Conditional operator not found\");\n            }\n            const operator = operators[model.operator];\n            if (!(operator in operations)) {\n                throw Error(\"Conditional operation not found\");\n            }\n            const operation = operations[operator];\n            let result = operation(model.valueA, model.valueB);\n            if (model.negative) {\n                result = !result;\n            }\n            context.set(model.responseName, result);\n            const outputConnector = result ? stepEntity.outputs[0] : stepEntity.outputs[1];\n            context.set(context.OUTPUT_CONNECTOR, outputConnector);\n            return context;\n        });\n    }\n}"
    },
    {
        "category": "logging",
        "name": "ConsoleStep",
        "action": "class ConsoleStep {\n    process(context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stepEntity = context.get(\"currentStep\");\n            const model = stepEntity.variables;\n            switch (model.level) {\n                case \"debug\":\n                    console.debug(model.message);\n                    break;\n                case \"info\":\n                    console.info(model.message);\n                    break;\n                case \"warn\":\n                    console.warn(model.message);\n                    break;\n                case \"error\":\n                    console.error(model.message);\n                    break;\n                default:\n                    console.log(model.message);\n                    break;\n            }\n            return context;\n        });\n    }\n}"
    },
    {
        "category": "http",
        "name": "HttpGetStep",
        "action": "class HttpGetStep {\n    process(context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stepEntity = context.get(\"currentStep\");\n            const model = stepEntity.variables;\n            const response = yield fetch(model.url, { headers: model.headers });\n            context.set(model.responseName, response);\n            return context;\n        });\n    }\n}"
    },
    {
        "category": "http",
        "name": "HttpResponseStep",
        "action": "class HttpResponseStep {\n    process(context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stepEntity = context.get(\"currentStep\");\n            const model = stepEntity.variables;\n            const converters = {\n                \"json\": () => __awaiter(this, void 0, void 0, function* () { return yield model.httpResponse.json(); }),\n                \"text\": () => __awaiter(this, void 0, void 0, function* () { return yield model.httpResponse.text(); })\n            };\n            const content = yield converters[model.contentType]();\n            context.set(model.resultName, content);\n            return context;\n        });\n    }\n}"
    },
    {
        "category": "json",
        "name": "JsonSerializerStep",
        "action": "class JsonSerializerStep {\n    process(context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const stepEntity = context.get(\"currentStep\");\n            const model = stepEntity.variables;\n            const response = model.action.toLocaleLowerCase() === \"serialize\" ? JSON.stringify(model.content) : JSON.parse(model.content);\n            context.set(model.responseName, response);\n            return context;\n        });\n    }\n}"
    }
]